let vimrcdir = '$HOME/.dotfiles/vim/'
exec ':source ' . vimrcdir . 'colemak.vim'
exec ':source ' . vimrcdir . 'commands.vim'

set number
set mouse=a
set tabstop=2
set shiftwidth=2
set expandtab
set foldmethod=syntax
set foldlevelstart=20
set foldlevel=0
set undofile
set undodir=~/.neovimundodir
set mmp=5000
set list "Show whitespace characters
set backupcopy=yes " makes webpack livereload work
set hidden " Hides current file when opening explorer
set backspace=start,eol,indent
set clipboard=unnamed

" PLUGINS
if empty(glob('~/.config/nvim/autoload/plug.vim'))
  silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
    \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.config/nvim/plugins')
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}
  Plug 'neoclide/coc.nvim', {'branch': 'release'}
  Plug 'junegunn/fzf', { 'dir': '~/.fzf' } " assume that fzf has already been installed
  Plug 'junegunn/fzf.vim'
  Plug 'morhetz/gruvbox'
  Plug 'tpope/vim-fugitive'
  Plug 'airblade/vim-gitgutter'
call plug#end()

let g:coc_global_extensions = [
\  'coc-tsserver',
\  'coc-prettier',
\  'coc-go',
\  'coc-sh',
\  'coc-eslint',
\  'coc-yaml',
\  'coc-json',
\  'coc-toml',
\  'coc-vimlsp',
\ ]

" gruvbox
set termguicolors
"set background=dark    " Setting dark mode
set background=light   " Setting light mode
let g:gruvbox_contrast_light = 'medium'
autocmd vimenter * colorscheme gruvbox

" FZF
" layout for all vim fzf windows
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6, 'relative': v:true } }

let g:fzf_colors =
\ { 'fg':      ['fg', 'Normal'],
  \ 'bg':      ['bg', 'Normal'],
  \ 'hl':      ['fg', 'Comment'],
  \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
  \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
  \ 'hl+':     ['fg', 'Statement'],
  \ 'info':    ['fg', 'PreProc'],
  \ 'border':  ['fg', 'Ignore'],
  \ 'prompt':  ['fg', 'Conditional'],
  \ 'pointer': ['fg', 'Exception'],
  \ 'marker':  ['fg', 'Keyword'],
  \ 'spinner': ['fg', 'Label'],
  \ 'header':  ['fg', 'Comment'] }

" vim-gutter settings
set updatetime=100
nmap ;] <Plug>(GitGutterNextHunk)
nmap ;[ <Plug>(GitGutterPrevHunk)
nmap <Leader>= <Plug>(GitGutterStageHunk)
nmap <Leader>- <Plug>(GitGutterUndoHunk)
nmap <Leader>; <Plug>(GitGutterPreviewHunk)

" filetypes, indendation
au BufNewFile,BufRead *.py
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=79 |
    \ set colorcolumn=79 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

au BufNewFile,BufRead *.js
    \ set tabstop=2 |
    \ set softtabstop=2 |
    \ set shiftwidth=2

au BufNewFile,BufRead *.swift
    \ set tabstop=4 |
    \ set softtabstop=4 |
    \ set shiftwidth=4 |
    \ set textwidth=119 |
    \ set colorcolumn=119 |
    \ set expandtab |
    \ set autoindent |
    \ set fileformat=unix

au BufRead,BufNewFile *.graphqls setfiletype graphql
au BufRead,BufNewFile *.graphql setfiletype graphql
au BufRead,BufNewFile *.gql setfiletype graphql

" Dont auto wrap
set formatoptions-=t

" treesitter
lua <<EOF
require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true
  },
}
EOF
