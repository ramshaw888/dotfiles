export PYTHON=/opt/homebrew/opt/python@3.11libexec/bin/python
export PATH=$PATH:/opt/homebrew/opt/python@3.11/libexec/bin

start_time=$(python -c 'from time import time; print(int(time() * 1000))')

export VISUAL='nvim'
export EDITOR="$VISUAL"
export GIT_EDITOR="$VISUAL"
alias vim="$VISUAL"
export CODEDIR="$HOME/go/src/github.com"
export ICLOUDDIR="$HOME/Library/Mobile Documents/com~apple~CloudDocs"

if [ -x /opt/homebrew/bin/brew ]; then
  eval "$(/opt/homebrew/bin/brew shellenv)"
elif [ -x /usr/local/bin/brew ]; then
  eval "$(/usr/local/bin/brew shellenv)"
else
  echo "brew not found in either path"
fi

# for gpg password caching
GPG_TTY=$(tty)
export GPG_TTY

source "$HOME/.dotfiles/zsh/functions.zsh"

# HISTORY
HISTFILE=~/.histfile
HISTSIZE=100000
SAVEHIST=100000

export LESSKEYIN="${0:h:A}/.dotfiles/lesskey_input"

setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.

# ALIASES
alias ls='ls -GFh'
alias gs='git status'
alias gd='git diff'
alias gc='git checkout'
alias gl='git log'
alias gf='git fetch'
alias gmo='git merge origin/master'
alias glo='git log --name-only'
alias gls='git log --pretty=oneline --abbrev-commit'
alias glg='git log --graph --pretty=oneline --abbrev-commit --all'
alias gp='git push origin HEAD'
alias gm='git checkout master && git fetch && git reset --hard origin/master'
alias gamend='git add --all; git commit --amend'
alias dev='cd ~/code'
alias vi='vim'
alias gt='go test -v ./...'
alias psql='pgcli'

# BINDKEY
bindkey -v

# Colemak bindings
bindkey -M vicmd 'i' vi-forward-char
bindkey -M vicmd 'h' vi-backward-char
bindkey -M vicmd 'e' up-history
bindkey -M vicmd 'n' down-history
bindkey -M vicmd 'E' up-line-or-history
bindkey -M vicmd 'N' down-line-or-history
bindkey -M vicmd 's' vi-insert
bindkey -M vicmd 'b' vi-backward-word
bindkey -M vicmd 'k' vi-forward-word


# === FZF ===
# Auto-completion (vendor), hardcoded now because these commands are slow
#FZF_VERSION=$(brew info fzf --json | jq '.[0].installed[0].version' | tr -d \"\")
# FZF_DIR="$(brew --cellar)/fzf/$FZF_VERSION"
#
FZF_DIR=/opt/homebrew/Cellar/fzf/0.42.0

if [ -d "$FZF_DIR" ]; then
else
  FZF_DIR=/usr/local/Cellar/fzf/0.32.0
fi

[[ $- == *i* ]] && source "$FZF_DIR/shell/completion.zsh" 2> /dev/null

# Key bindings (vendor)
if [[ -f "$FZF_DIR/shell/key-bindings.zsh" ]]; then
  source "$FZF_DIR/shell/key-bindings.zsh"
else
  echo "key-bindings.zsh not found in $FZF_DIR/shell"
fi


# override default CTRL-T to CTRL-F so we can use the same binding inside vim
bindkey '^F' fzf-file-widget
bindkey '^U' fzf-cd-widget

export FZF_DEFAULT_COMMAND="ag -g . \$(git_dir_cdup)"  # only filenames
export FZF_DEFAULT_OPTS="--height ${FZF_TMUX_HEIGHT:-75%} +m --reverse"

export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_CTRL_T_OPTS="$FZF_DEFAULT_OPTS"

# CTRL-P fuzzy history search
fuzzy_history() {
  # +s dont sort the result, --tac reverse the order of input (most recent hist entries first)
  print -z $( ([ -n "$ZSH_NAME" ] && fc -ln 1 || history) | fzf +s --tac | sed 's/ *[0-9]* *//')
  zle accept-line
}
zle -N fuzzy_history
bindkey '^p' fuzzy_history


# CTRL-Y List all git repositories, and then cd into the selected one
repo_cd() {
  repos=$( lsrepos )
  selected_dir=$( echo $repos | fzf +s --tac )
  if [[ ! -z $selected_dir ]]; then
    cd $CODEDIR/$selected_dir
    zle accept-line
  fi
}
zle -N repo_cd
bindkey '^y' repo_cd

# CTRL-K open diary (from selfrc)
zle -N diary
bindkey '^k' diary

if [ -f $HOME/.selfrc/selfrc.zsh ];
then
  source "$HOME/.selfrc/selfrc.zsh"
fi

# macos default less is built without the lesskey options, instead a brew
# version can be used. By default man uses /usr/bin/less.
export MANPAGER=$(which less)

# Golang specific
export GOPATH=$HOME/go
export GOBIN=$HOME/go/bin
export PATH=$PATH:$GOBIN

# Python specific
export PIP_CACHE_DIR=$HOME/.cache/pip

# YouCompleteMe requires dynamic python libaries
#export PYTHON_CONFIGURE_OPTS="--enable-framework"

# base16 theme hardcode
#
# BASE16_THEME=base16-summerfruit-dark
# source "$HOME/.config/base16-shell/scripts/$BASE16_THEME.sh"

# allow easy base16 switching
BASE16_SHELL="$HOME/.config/base16-shell/"
[ -n "$PS1" ] && \
    [ -s "$BASE16_SHELL/profile_helper.sh" ] && \
        source "$BASE16_SHELL/profile_helper.sh"

# promptinit - custom prompts, as customised below
autoload -Uz promptinit; promptinit
setopt promptsubst

function git_prompt() {
  local ref="$(git rev-parse --symbolic-full-name --abbrev-ref HEAD 2>/dev/null)"
  if [ -n "$ref" ]; then
    echo "(%{$fg_bold[magenta]%}${ref#refs/heads/}%{$reset_color%}) "
  fi
}

PROMPT='$(git_prompt)%{$fg_bold[green]%}${PWD/#$HOME/~}%{$reset_color%} $ '
RPROMPT=''

# zsh completion system
autoload -U compinit && compinit
zmodload -i zsh/complist

if [ -d $CODEDIR ]
then
  cd $CODEDIR
fi

# The next line updates PATH for the Google Cloud SDK.

if [ -f "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc" ]; then . "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/path.zsh.inc"; fi

# The next line enables shell command completion for gcloud.
if [ -f "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc" ]; then . "/usr/local/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/completion.zsh.inc"; fi
# gcloud components (e.g. cloud_sql_proxy) may be installed to this bin directory. They don't get automatically added to PATH when using the brew installation>
# Slow so hardcoding this value
# export PATH=$PATH:$(gcloud info --format="value(installation.sdk_root)")/bin
export PATH=$PATH:/opt/homebrew/Caskroom/google-cloud-sdk/latest/google-cloud-sdk/bin

if which helm &> /dev/null
then
  source <(helm completion zsh)
fi

load-nvm() {
  unset -f node nvm npm
  export NVM_DIR="$HOME/.nvm"
  [ -s "/opt/homebrew/opt/nvm/nvm.sh" ] && . "/opt/homebrew/opt/nvm/nvm.sh"  # This loads nvm
}
node() {
  load-nvm
  node $@
}
npm() {
  load-nvm
  npm $@
}
nvm() {
  load-nvm
  nvm $@
}

# default node bins
export PATH=/Users/ramshaw/.nvm/versions/node/v16.13.1/bin:$PATH

[ -s "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm" ] && . "/opt/homebrew/opt/nvm/etc/bash_completion.d/nvm"  # This loads nvm bash_completion

export PATH=/opt/homebrew/opt/libpq/bin:$PATH
export GOPRIVATE=github.com/spaceship-fspl

# for profiling
end_time=$(python -c 'from time import time; print(int(time() * 1000))')
